{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"25b258e3309da1e2def5","result":{"data":{"deck":{"id":"6c8aa89e-7c75-5c5c-baf4-94874b32d7f6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = nightOwl;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Refactoring with jscodeshift\")), mdx(\"h1\", null, \"Hello!\"), mdx(\"hr\", null), mdx(\"h1\", null, \"jscodeshift + \", mdx(\"img\", {\n    style: {\n      width: '185px',\n      position: 'relative',\n      top: \"18px\"\n    },\n    src: \"https://ink.carta.com/fonts/ink_white.svg\"\n  })), mdx(\"h2\", null, \"Robots taking our jobs \\uD83E\\uDD16\"), mdx(\"h3\", null, \"Pain-free (for you) Ink upgrades\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Rodrigo Deodoro\"), mdx(\"img\", {\n    \"src\": \"https://ca.slack-edge.com/T02ALE3NE-U0U9655HS-2a18106ee26a-512\",\n    \"alt\": \"profile picture\",\n    \"title\": \"Profile\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Been @ Carta for ~4 years\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tech lead @ Design Technology\")), mdx(\"hr\", null), mdx(\"h1\", null, \"The problem:\"), mdx(\"h2\", null, \"Upgrading components reliably \", mdx(\"br\", null), \" across all of \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"carta-web\"), \".\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"As Ink has grown, both as a team and as a Design System, we've also gotten better at writing\\nreusable components, to the point where it started becoming painful to go back and look at\\nsome of the first components we wrote. However, to really fix them, we'd have to introduce\\nbreaking changes, and...\")), mdx(\"hr\", null), mdx(\"h1\", null, \"That means a ton of breaking changes\"), mdx(\"hr\", null), mdx(\"h1\", null, \"you rn probably\"), mdx(\"img\", {\n    src: confused,\n    style: {\n      height: '70vh'\n    }\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Nobody likes breaking changes\"), mdx(\"h2\", null, \"But deprecating stuff is hard\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: currency,\n    style: {\n      width: '50vw'\n    }\n  }), mdx(\"img\", {\n    src: filepicker,\n    style: {\n      width: '50vw'\n    }\n  }), mdx(\"img\", {\n    src: deprecatedProps,\n    style: {\n      width: '50vw'\n    }\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"And we know we haven't been good at following deprecations.\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Thousands of changes in JSX\"), mdx(\"h2\", null, \"Regex won't help you here\"), mdx(\"hr\", null), mdx(\"img\", {\n    style: {\n      maxWidth: '100vw',\n      maxHeight: '100vh'\n    },\n    src: jcs\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"How does jscodeshift work?\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Enter the AST (Abstract Syntax Tree)\"), mdx(\"h2\", null, \"The AST is how the interpreter sees code\"), mdx(\"h5\", null, \"(sort of)\"), mdx(\"hr\", null), mdx(\"iframe\", {\n    style: {\n      width: '95vw',\n      height: '95vh',\n      border: 0\n    },\n    src: \"https://rezmason.github.io/matrix/\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function sayHello(name) {\\n  alert('Hello ' + name);\\n}\\n\\n\")), mdx(\"img\", {\n    style: {\n      height: '90vh'\n    },\n    src: ast\n  }))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// transform.js\\nexport default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    { ... }\\n\\n    return root.toSource();\\n}\\n\\n~/carta-web $ jscodeshift --parser=flow transform.js assets/\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Where we start\\\"\",\n    \"title\": \"\\\"Where\",\n    \"we\": true,\n    \"start\\\"\": true\n  }), \"function sayHello(name) {\\n  alert('Hello ' + name);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Where we want to end\\\"\",\n    \"title\": \"\\\"Where\",\n    \"we\": true,\n    \"want\": true,\n    \"to\": true,\n    \"end\\\"\": true\n  }), \"function sayGoodbye(name) {\\n  alert('Bye, ' + name);\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Live demo\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://astexplorer.net/\"\n  }), \"https://astexplorer.net/\")), mdx(\"small\", null, mdx(\"a\", {\n    href: \"https://astexplorer.net/#/gist/6d14b47e8433ff5ef53852ae7e2ae9d8/738e2835d1afda32b5895f7de459a2bd35b3a56a\"\n  }, \"or click here for the final result\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"export default function transformer(file, api) {\\n  const j = api.jscodeshift;\\n  const root = j(file.source);\\n\\n  const func = root.find(j.FunctionDeclaration, {id: {name: 'sayHello'}})\\n\\n  func\\n    .find(j.Literal, {value: 'Hello '})\\n    .forEach(node => j(node).replaceWith('\\\"Bye, \\\"'))\\n\\n  func\\n    .find(j.Identifier, {name: 'sayHello'})\\n    .forEach(node => j(node).replaceWith(\\\"sayGoodbye\\\"));\\n\\n  return root.toSource();\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"But what about JSX?\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: jsx1\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: jsx2\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: jsx3\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: jsx4\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Starting with our transformer template\\\"\",\n    \"subtitle\": \"\\\"Starting\",\n    \"with\": true,\n    \"our\": true,\n    \"transformer\": true,\n    \"template\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    { ... }\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"10[16:26] subtitle=\\\"And what we want to do is replace the isDisabled with disabled\\\"\",\n    \"10[16:26]\": true,\n    \"subtitle\": \"\\\"And\",\n    \"what\": true,\n    \"we\": true,\n    \"want\": true,\n    \"to\": true,\n    \"do\": true,\n    \"is\": true,\n    \"replace\": true,\n    \"the\": true,\n    \"isDisabled\": true,\n    \"with\": true,\n    \"disabled\\\"\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    { ... }\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"We start a chain from root\\\"\",\n    \"subtitle\": \"\\\"We\",\n    \"start\": true,\n    \"a\": true,\n    \"chain\": true,\n    \"from\": true,\n    \"root\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"10\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"...then make a query for opening JSX tags called 'Dropdown'\\\"\",\n    \"subtitle\": \"\\\"...then\",\n    \"make\": true,\n    \"a\": true,\n    \"query\": true,\n    \"for\": true,\n    \"opening\": true,\n    \"JSX\": true,\n    \"tags\": true,\n    \"called\": true,\n    \"'Dropdown'\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: 'Dropdown' } } })\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"10[16:26]\",\n    \"10[16:26]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"...who have the 'isDisabled' attribute, or prop\\\"\",\n    \"subtitle\": \"\\\"...who\",\n    \"have\": true,\n    \"the\": true,\n    \"'isDisabled'\": true,\n    \"attribute,\": true,\n    \"or\": true,\n    \"prop\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: 'Dropdown' } } })\\n      .find(j.JSXAttribute, { name: { name: 'isDisabled' } })\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"10[16:24]\",\n    \"10[16:24]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"and replace it with 'disabled'\\\"\",\n    \"subtitle\": \"\\\"and\",\n    \"replace\": true,\n    \"it\": true,\n    \"with\": true,\n    \"'disabled'\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: 'Dropdown' } } })\\n      .find(j.JSXAttribute, { name: { name: 'isDisabled' } })\\n      .forEach(e => j(e).replaceWith('disabled'))\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"And we're done!\\\"\",\n    \"subtitle\": \"\\\"And\",\n    \"we're\": true,\n    \"done!\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: 'Dropdown' } } })\\n      .find(j.JSXAttribute, { name: { name: 'isDisabled' } })\\n      .forEach(e => j(e).replaceWith('disabled'))\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6[1:2]\",\n    \"6[1:2]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:8 subtitle=\\\"And if we abstract this chain...\\\"\",\n    \"5:8\": true,\n    \"subtitle\": \"\\\"And\",\n    \"if\": true,\n    \"we\": true,\n    \"abstract\": true,\n    \"this\": true,\n    \"chain...\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: 'Dropdown' } } })\\n      .find(j.JSXAttribute, { name: { name: 'isDisabled' } })\\n      .forEach(e => j(e).replaceWith('disabled'))\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6[1:2]\",\n    \"6[1:2]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:8 subtitle=\\\"by using named parameters\\\"\",\n    \"5:8\": true,\n    \"subtitle\": \"\\\"by\",\n    \"using\": true,\n    \"named\": true,\n    \"parameters\\\"\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: elName } } })\\n      .find(j.JSXAttribute, { name: { name: 'isDisabled' } })\\n      .forEach(e => j(e).replaceWith('disabled'))\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6[1:2]\",\n    \"6[1:2]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:8\",\n    \"5:8\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: elName } } })\\n      .find(j.JSXAttribute, { name: { name: before } })\\n      .forEach(e => j(e).replaceWith('disabled'))\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6[1:2]\",\n    \"6[1:2]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:8\",\n    \"5:8\": true\n  }), \"export default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    root\\n      .find(j.JSXElement, { openingElement: { name: { name: elName } } })\\n      .find(j.JSXAttribute, { name: { name: before } })\\n      .forEach(e => j(e).replaceWith(after))\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt noMargins>\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6,12\",\n    \"1:6,12\": true\n  }), \"function renameProp(j, root, name, oldProp, newProp) {\\n  root\\n    .find(j.JSXElement, { openingElement: { name: { name: elName } } })\\n    .find(j.JSXAttribute, { name: { name: before } })\\n    .forEach(e => j(e).replaceWith(after))\\n}\\n\\nexport default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    renameProp(j, root, 'Dropdown', 'isDisabled', 'disabled')\\n\\n    return root.toSource();\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"We've now refactored <Belt /> with only an extra line\\\"\",\n    \"subtitle\": \"\\\"We've\",\n    \"now\": true,\n    \"refactored\": true,\n    \"<Belt\": true,\n    \"/>\": true,\n    \"with\": true,\n    \"only\": true,\n    \"an\": true,\n    \"extra\": true,\n    \"line\\\"\": true\n  }), \"function renameProp(j, root, name, oldProp, newProp) {\\n  root\\n    .find(j.JSXElement, { openingElement: { name: { name: elName } } })\\n    .find(j.JSXAttribute, { name: { name: before } })\\n    .forEach(e => j(e).replaceWith(after))\\n}\\n\\nexport default function transformer(file, api) {\\n    const j = api.jscodeshift;\\n    const root = j(file.source);\\n\\n    renameProp(j, root, 'Dropdown', 'isDisabled', 'disabled')\\n    renameProp(j, root, 'Belt', 'noMargins', null)\\n\\n    return root.toSource();\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"But what about the \", mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"<Display />\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8,12\",\n    \"8,12\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8[11:28]\",\n    \"8[11:28]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8[11:28]\",\n    \"8[11:28]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8,12\",\n    \"8,12\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8,12\",\n    \"8,12\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n\\n      })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8,12\",\n    \"8,12\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"7[15:22]\",\n    \"7[15:22]\": true\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n\\n      })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8,12\",\n    \"8,12\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n        const displayNode = display.node;\\n      })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8[11:30]\",\n    \"8[11:30]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n        const displayNode = display.node;\\n\\n        const condition = displayNode\\n          .openingElement\\n          .attributes\\n          .find(attr => attr.name.name === 'when').value;\\n      })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"9,10,11\",\n    \"9,10,11\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n        const displayNode = display.node;\\n\\n        const condition = displayNode\\n          .openingElement\\n          .attributes\\n          .find(attr => attr.name.name === 'when').value;\\n\\n        const children = displayNode\\n          .children\\n          .find(e => e.type === 'JSXElement');\\n      })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8[18:28]\",\n    \"8[18:28]\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  <Display when={ !isLoading }>\\n    <Belt >\\n      <Dropdown disabled />\\n    </Belt>\\n  </Display>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n        const displayNode = display.node;\\n\\n        const condition = displayNode\\n          .openingElement\\n          .attributes\\n          .find(attr => attr.name.name === 'when').value;\\n\\n        const children = displayNode\\n          .children\\n          .find(e => e.type === 'JSXElement');\\n\\n        const boolExprNode = j.logicalExpression(\\n          \\\"&&\\\", condition.expression, children\\n        );\\n      })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8,9,10\",\n    \"8,9,10\": true\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  !isLoading && <Belt >\\n    <Dropdown isDisabled />\\n  </Belt>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function transformer(file, api) {\\n    root\\n      .find(\\n        j.JSXElement,\\n        { openingElement: { name: { name: \\\"Display\\\" } } }\\n      )\\n      .forEach(display => {\\n        const displayNode = display.node;\\n\\n        const condition = displayNode\\n          .openingElement\\n          .attributes\\n          .find(attr => attr.name.name === 'when').value;\\n\\n        const children = displayNode\\n          .children\\n          .find(e => e.type === 'JSXElement');\\n\\n        const boolExprNode = j.logicalExpression(\\n          \\\"&&\\\", condition.expression, children\\n        );\\n\\n        display.replace(boolExprNode)\\n      })\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Dropdown,\\n  Belt,\\n  Display\\n} from '@carta/ink';\\n\\nexport default ({ isLoading }) => (\\n  !isLoading && <Belt >\\n    <Dropdown isDisabled />\\n  </Belt>\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Dropdown, Belt, Display } from \\\"@carta/ink\\\";\\n\\nexport default ({ isLoading }) =>\\n  !isLoading && (\\n    <Belt>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  );\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Dropdown, Belt } from \\\"@carta/ink\\\";\\n\\nexport default ({ isLoading }) =>\\n  !isLoading && (\\n    <Belt>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  );\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Dropdown, Belt } from \\\"@carta/ink\\\";\\n\\nexport default ({ isLoading }) =>\\n  !isLoading && (\\n    <Belt>\\n      <Dropdown isDisabled />\\n    </Belt>\\n  );\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Thank you :)\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"6c8aa89e-7c75-5c5c-baf4-94874b32d7f6","slug":"/jscodeshift","title":"Hello!"}}}